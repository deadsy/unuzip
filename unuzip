#!/usr/bin/env python3
# ------------------------------------------------------------------------------
"""

unuzip - Decompress FreeBSD UZIP images

https://github.com/deadsy/unuzip

Copyright (c) 2019 Mike Ryan
Copyright (c) 2023 Jason Harris

This code is released under the terms of the MIT license. Refer to COPYING for more details.

"""
# ------------------------------------------------------------------------------

import argparse
import os
import struct
import zlib
import lzma
import zstd

# ------------------------------------------------------------------------------


def fatal(msg):
    print("Error: %s" % msg)
    exit(1)


# ------------------------------------------------------------------------------

MAGIC_LEN = 128
MAGIC = "#!/bin/sh"
FORMAT_V2 = "#V2.0 Format"  # zlib
FORMAT_V3 = "#L3.0"  # lzma
FORMAT_V4 = "#Z4.0 Format"  # zstd

fmt_name = {
    2: "v2(zlib)",
    3: "v3(lzma)",
    4: "v4(zstd)",
}


def rd_magic(f):
    """read the input file magic values"""
    magic = f.read(MAGIC_LEN).decode("utf-8")
    if len(magic) != MAGIC_LEN:
        return None, "file too short"
    lines = magic.split("\n")
    if len(lines) < 2 or lines[0] != MAGIC:
        return None, "unknown file format"
    if lines[1] == FORMAT_V2:
        return 2, None
    if lines[1] == FORMAT_V3:
        return 3, None
    if lines[1] == FORMAT_V4:
        return 4, None
    return None, "unknown file format"


# ------------------------------------------------------------------------------

DEV_BSIZE = 512  # so sayeth FreeBSD
MAX_BSIZE = 131072


def rd_header(f):
    """read the input file header"""
    hdr = f.read(8)
    if len(hdr) != 8:
        return None, None, "file too short"
    block_size, num_blocks = struct.unpack(">II", hdr)
    if block_size < DEV_BSIZE or block_size > MAX_BSIZE or block_size % DEV_BSIZE != 0:
        return None, None, "invalid block size (%u)" % block_size
    return block_size, num_blocks, None


# ------------------------------------------------------------------------------


def rd_toc(f, num_blocks):
    """read the input file table-of-contents"""
    toc = []
    for i in range(num_blocks + 1):
        entry = f.read(8)
        if len(entry) < 8:
            return None, "file truncated in toc"
        toc.append(struct.unpack(">Q", entry)[0])
    return toc, None


# ------------------------------------------------------------------------------


def decompress(ofile, ifile, version, toc, num_blocks, block_size):
    if ifile.tell() != toc[0]:
        return "input file not at toc[0] position"
    block = bytearray()
    for idx in range(num_blocks):
        n = toc[idx + 1] - toc[idx]
        if n != 0:
            data = ifile.read(n)
            if version == 2:
                block = zlib.decompress(data)
            elif version == 3:
                block = lzma.decompress(data)
            elif version == 4:
                block = zstd.decompress(data)
            else:
                return "bad version %d" % version
            if (idx != num_blocks - 1) and (len(block) != block_size):
                return "decompression error for block %u" % idx
        else:
            # no compressed block -> block_size zeroes
            block = bytearray(block_size)
        ofile.write(block)

    return None


# ------------------------------------------------------------------------------


def main():
    parser = argparse.ArgumentParser(
        description="Decompress FreeBSD UZIP/IZO images",
        epilog="""visit: https://github.com/deadsy/unuzip""",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument("infile", help="input file")
    parser.add_argument(
        "outfile", help="output file (default: <infile>.iso)", nargs="?"
    )
    parser.add_argument("-v", help="be verbose", action="store_true")
    args = parser.parse_args()

    # open input/output files
    if args.outfile is None:
        args.outfile = "%s.iso" % os.path.splitext(args.infile)[0]

    try:
        ifile = open(args.infile, "rb")
    except IOError as e:
        fatal("can't open input file: %s" % e)

    try:
        ofile = open(args.outfile, "wb")
    except IOError as e:
        fatal("can't open output file: %s" % e)

    version, err = rd_magic(ifile)
    if err is not None:
        fatal(err)

    block_size, num_blocks, err = rd_header(ifile)
    if err is not None:
        fatal(err)

    if args.v:
        print("%s -> %s" % (args.infile, args.outfile))
        print("format: %s" % fmt_name[version])
        print("blocks: %u" % num_blocks)
        print("block size: %u" % block_size)
        print("total size: %u" % (block_size * num_blocks))

    toc, err = rd_toc(ifile, num_blocks)
    if err is not None:
        fatal(err)

    err = decompress(ofile, ifile, version, toc, num_blocks, block_size)
    if err is not None:
        fatal(err)

    ifile.close()
    ofile.close()


main()

# ------------------------------------------------------------------------------
